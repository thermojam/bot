import express from 'express';
import bodyParser from 'body-parser';
import {config} from 'dotenv';
import TelegramBot from 'node-telegram-bot-api';

import db, {admin} from './firebase.js';

config();

const TOKEN = process.env.TELEGRAM_TOKEN;
const URL = process.env.RENDER_EXTERNAL_URL;
const PORT = process.env.PORT || 3000;
const ADMIN_CHAT_ID = process.env.ADMIN_CHAT_ID;
const CHANNEL_USERNAME = process.env.CHANNEL_USERNAME; // üëà –î–æ–±–∞–≤–ª–µ–Ω–æ

// === Firebase ===
if (!admin.apps.length) {
    admin.initializeApp({
        credential: admin.credential.cert(FIREBASE_SERVICE_KEY),
    });
}

// === Bot Init ===
const bot = new TelegramBot(TOKEN);
bot.setWebHook(`${URL}/bot${TOKEN}`);

const app = express();
app.use(bodyParser.json());
app.use(express.static('public'));

// === Webhook Route ===
app.post(`/bot${TOKEN}`, (req, res) => {
    bot.processUpdate(req.body);
    res.sendStatus(200);
});

// === Homepage Route ===
app.get('/', (req, res) => {
    res.send(`<h1 style="color:white; text-align:center; background:#282828; padding:100px">Bot is running!</h1>`);
});

// === Start Server ===
app.listen(PORT, () => console.log(`Bot running on port ${PORT}`));

// === Firestore Utils ===
const updateUserStep = async (chatId, step) => {
    const ref = db.collection('users').doc(String(chatId));
    const doc = await ref.get();
    if (!doc.exists) {
        await ref.set({
            name: null,
            startedAt: new Date(),
            isSubscribed: null,
            steps: [step],
        });
    } else {
        await ref.update({
            steps: admin.firestore.FieldValue.arrayUnion(step),
        });
    }
};

const setUserName = async (chatId, name) => {
    await db.collection('users').doc(String(chatId)).update({name});
};

const setSubscriptionStatus = async (chatId, status) => {
    await db.collection('users').doc(String(chatId)).update({isSubscribed: status});
};

const getAllUserStats = async () => {
    const snapshot = await db.collection('users').get();
    return snapshot.docs.map(doc => ({id: doc.id, ...doc.data()}));
};

// === Bot Dialog ===
bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    const firstName = msg.from.first_name;

    await updateUserStep(chatId, 'start');
    await setUserName(chatId, firstName);

    const welcomeMessage = `–ü—Ä–∏–≤–µ—Ç, ${firstName}! üëã\n\n–Ø –ö—Å–µ–Ω–∏—è ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∑–¥–æ—Ä–æ–≤—å—é –∏ –±–∞–ª–∞–Ω—Å—É.\n\n–•–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –≤–∏–¥–µ–æ—É—Ä–æ–∫?\n\n–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±–µ –±–ª–∏–∂–µ üëá`;

    const options = {
        reply_markup: {
            inline_keyboard: [
                [
                    {text: 'üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è üü£', callback_data: 'psychology'},
                    {text: 'üßò –ì–∏–º–Ω–∞—Å—Ç–∏–∫–∞ üîµ', callback_data: 'gymnastics'},
                ],
                [{text: 'ü•ó –ù—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∏—è üü¢', callback_data: 'nutrition'}],
            ],
        },
    };

    bot.sendMessage(chatId, welcomeMessage, options);
});

bot.onText(/\/stats/, async (msg) => {
    const chatId = msg.chat.id;
    if (chatId.toString() !== ADMIN_CHAT_ID) return;

    const users = await getAllUserStats();
    if (!users.length) return bot.sendMessage(chatId, 'üì≠ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞');

    let report = 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n';
    users.forEach(user => {
        report += `üë§ ${user.name || '–ë–µ–∑ –∏–º–µ–Ω–∏'} (${user.id})\n`;
        report += `‚è∞ –° –Ω–∞—á–∞–ª–∞: ${new Date(user.startedAt._seconds * 1000).toLocaleString()}\n`;
        report += `üßæ –î–µ–π—Å—Ç–≤–∏—è: ${user.steps?.join(', ') || '–Ω–µ—Ç'}\n`;
        report += `üîî –ü–æ–¥–ø–∏—Å–∫–∞: ${user.isSubscribed === true ? '‚úÖ' : '‚ùå'}\n\n`;
    });

    bot.sendMessage(chatId, report);
});

bot.on('callback_query', async (query) => {
    const chatId = query.message.chat.id;
    const data = query.data;
    const name = query.from.first_name;
    const userId = query.from.id;

    await updateUserStep(chatId, data);
    await setUserName(chatId, name);

    try {
        const channelUsername = `@${process.env.CHANNEL_USERNAME.replace('@', '')}`;
        const member = await bot.getChatMember(channelUsername, userId);
        const isSubscribed = ['member', 'creator', 'administrator'].includes(member.status);
        await setSubscriptionStatus(chatId, isSubscribed);

        if (!isSubscribed) {
            return bot.sendMessage(chatId,
                `üîí –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≤–∏–¥–µ–æ—É—Ä–æ–∫—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª ${channelUsername}\n\n` +
                `–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–∞ –∫–Ω–æ–ø–∫—É.`,
                {
                    reply_markup: {
                        inline_keyboard: [
                            [{text: 'üì≤ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', url: `https://t.me/${channelUsername.replace('@', '')}`}],
                            [{text: 'üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data: data}]
                        ]
                    }
                }
            );
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
        return bot.sendMessage(chatId, 'üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.');
    }

    if (data === 'want_course') {
        await updateUserStep(chatId, 'want_course');

        return bot.sendMessage(
            chatId,
            `‚ú® *–ó–∞–ø–∏—à–∏—Å—å –Ω–∞ –∫—É—Ä—Å!*\n\nüîπ –£–Ω–∏–∫–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞\nüîπ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç –ö—Å–µ–Ω–∏–∏\nüîπ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ\n\nüí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å: *990‚ÇΩ*`,
            {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üí∏ –û–ø–ª–∞—Ç–∏—Ç—å –∫—É—Ä—Å', callback_data: 'mock_payment' }],
                    ],
                },
            }
        );
    }

    if (data === 'mock_payment') {
        await updateUserStep(chatId, 'mock_payment');

        bot.sendMessage(chatId, 'üí≥ –ù–∞—á–∏–Ω–∞–µ–º "–æ–ø–ª–∞—Ç—É"... ‚è≥');

        setTimeout(() => {
            bot.sendMessage(chatId, '‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! üéâ –î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç.');
            bot.sendMessage(chatId, 'üì¶ –í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫—É—Ä—Å: https://web.telegram.org/k/#-2689228807');
        }, 2000);

        return;
    }

    const lessonLinks = {
        psychology: 'https://www.youtube.com/watch?v=iLlrIi9-NfQ',
        gymnastics: 'https://www.youtube.com/watch?v=-wqLcfcA_ig',
        nutrition: 'https://www.youtube.com/watch?v=-e-4Kx5px_I',
    };

    const messages = {
        psychology: 'üß† *–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è*\n\n–í–æ—Ç –≤–∏–¥–µ–æ—É—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Å–µ–±–µ –∏ –æ–±—Ä–µ—Å—Ç–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±–∞–ª–∞–Ω—Å.',
        gymnastics: 'üßò *–°–ª–∞–≤—è–Ω—Å–∫–∞—è –≥–∏–º–Ω–∞—Å—Ç–∏–∫–∞*\n\n–ü–æ–ø—Ä–æ–±—É–π –¥—Ä–µ–≤–Ω–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è –∏ –∂–µ–Ω—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏.',
        nutrition: 'ü•ó *–ù—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∏—è*\n\n–ù–∞—É—á–∏—Å—å –ø–∏—Ç–∞—Ç—å—Å—è –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ –∏ —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è –ª—É—á—à–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.',
    };

    const msg = `${messages[data]}\n\nüëâ [–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ](${lessonLinks[data]})`;

    bot.sendMessage(chatId, msg, {
        parse_mode: 'Markdown',
        reply_markup: {
            inline_keyboard: [[{text: 'üìö –•–æ—á—É –∫—É—Ä—Å!', callback_data: 'want_course'}]],
        },
    });
});
