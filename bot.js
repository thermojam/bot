const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const bodyParser = require('body-parser');
const cron = require('node-cron');

const app = express();

const TOKEN = process.env.TELEGRAM_TOKEN;
const bot = new TelegramBot(TOKEN);

const URL = process.env.RENDER_EXTERNAL_URL || 'https://bot-gupk.onrender.com';
const PORT = process.env.PORT || 3000;

app.use(bodyParser.json());
bot.setWebHook(`${URL}/bot${TOKEN}`);

app.post(`/bot${TOKEN}`, (req, res) => {
    bot.processUpdate(req.body);
    res.sendStatus(200);
});

app.get('/', (req, res) => {
    res.send('ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!');
});

app.listen(PORT, () => {
    console.log(`Express-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});

// === –õ–æ–≥–∏–∫–∞ –±–æ—Ç–∞ ===
let userData = {};
let subscribedUsers = new Set(); // –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏

// 1Ô∏è‚É£ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∫–Ω–æ–ø–∫–∏
bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    const firstName = msg.from.first_name;

    if (!userData[chatId]) {
        userData[chatId] = {};
    }

    subscribedUsers.add(chatId); // –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö

    const welcomeMessage = `
üëã –ü—Ä–∏–≤–µ—Ç, <b>${firstName}</b>!
–Ø ‚Äî –ö—Å–µ–Ω–∏—è, —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–ª–∞–≤—è–Ω—Å–∫–æ–π –≥–∏–º–Ω–∞—Å—Ç–∏–∫–µ.

üéÅ –•–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —É—Ä–æ–∫:
<b>¬´3 —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —Å–Ω—è—Ç–∏—è —É—Å—Ç–∞–ª–æ—Å—Ç–∏ –∑–∞ 10 –º–∏–Ω—É—Ç¬ª</b>?

–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:
    `;

    const options = {
        parse_mode: 'HTML',
        reply_markup: {
            inline_keyboard: [
                [
                    { text: '‚úÖ –î–∞, —Ö–æ—á—É —É—Ä–æ–∫!', callback_data: 'want_lesson' },
                    { text: '‚ùå –ü–æ–∫–∞ –Ω–µ—Ç', callback_data: 'no_lesson' }
                ]
            ]
        }
    };

    bot.sendMessage(chatId, welcomeMessage, options);
});

// 2Ô∏è‚É£ Callback –æ–±—Ä–∞–±–æ—Ç–∫–∞
bot.on('callback_query', (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const data = callbackQuery.data;

    bot.answerCallbackQuery(callbackQuery.id).catch(console.error);

    if (data === 'want_lesson') {
        const surveyMessage = `
üìù <b>–ú–∏–Ω–∏-–æ–ø—Ä–æ—Å:</b>
–ß—Ç–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç —Ç–µ–±—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?
        `;

        const options = {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: 'üíî –ë–æ–ª–∏ –≤ —Å–ø–∏–Ω–µ', callback_data: 'back_pain' },
                        { text: '‚ö° –ù–µ—Ç —ç–Ω–µ—Ä–≥–∏–∏', callback_data: 'no_energy' }
                    ],
                    [
                        { text: 'üòü –°—Ç—Ä–µ—Å—Å', callback_data: 'stress' }
                    ]
                ]
            }
        };

        bot.sendMessage(chatId, surveyMessage, options);

    } else if (data === 'no_lesson') {
        bot.sendMessage(chatId, '–•–æ—Ä–æ—à–æ üòä –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ /start.');

    } else if (['back_pain', 'no_energy', 'stress'].includes(data)) {
        userData[chatId].concern = data;

        const lessonMessage = `
üé¨ <b>–¢–≤–æ–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –≤–∏–¥–µ–æ-—É—Ä–æ–∫:</b>

üîπ <a href="https://www.youtube.com/watch?v=IT94xC35u6k">–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ</a>

–ü–æ–ø—Ä–æ–±—É–π —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å, –∞ –ø–æ—Å–ª–µ –Ω–∞–ø–∏—à–∏, –∫–∞–∫ –æ—â—É—â–µ–Ω–∏—è üòä

P.S. –•–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –∫—É—Ä—Å —Å –º–æ–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π?
–ñ–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá
        `;

        const options = {
            parse_mode: 'HTML',
            disable_web_page_preview: false,
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: 'üìö –•–æ—á—É –∫—É—Ä—Å!', callback_data: 'want_course' }
                    ]
                ]
            }
        };

        bot.sendMessage(chatId, lessonMessage, options);

    } else if (data === 'want_course') {
        const saleMessage = `
‚ú® <b>–ö–∞–∫ —Ç–µ–±–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è?</b>

–•–æ—á–µ—à—å:
‚úÖ –ò–∑–±–∞–≤–∏—Ç—å—Å—è –æ—Ç –±–æ–ª–µ–π –≤ —Å–ø–∏–Ω–µ
‚úÖ –í–µ—Ä–Ω—É—Ç—å —ç–Ω–µ—Ä–≥–∏—é –∏ –ª—ë–≥–∫–æ—Å—Ç—å
‚úÖ –†–∞–±–æ—Ç–∞—Ç—å –≤ –≥—Ä—É–ø–ø–µ —Å –º–æ–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π

üì¶ –°—Ç–∞—Ä—Ç—É–µ—Ç –∫—É—Ä—Å: <b>¬´–°–ª–∞–≤—è–Ω—Å–∫–∞—è –≥–∏–º–Ω–∞—Å—Ç–∏–∫–∞: 5 —à–∞–≥–æ–≤ –∫ –∑–¥–æ—Ä–æ–≤—å—é¬ª</b>
–ù–∞–ø–∏—à–∏ –º–Ω–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ üíå
        `;

        bot.sendMessage(chatId, saleMessage, { parse_mode: 'HTML' });
    }
});

// 3Ô∏è‚É£ –ê–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∞ –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
cron.schedule('0 9 * * *', () => {
    subscribedUsers.forEach((chatId) => {
        bot.sendMessage(chatId, `
üîî <b>–ù–µ –ø—Ä–æ–ø—É—Å—Ç–∏ –≤–∞–∂–Ω–æ–µ!</b>

–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à Telegram-–∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —Å–æ–≤–µ—Ç—ã –ø–æ –∑–¥–æ—Ä–æ–≤—å—é, —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.

üëâ <a href="https://t.me/xenia_kamensky ">–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª</a>
        `, { parse_mode: 'HTML' }).catch(console.error);
    });
}, {
    timezone: 'Europe/Moscow' 
});
