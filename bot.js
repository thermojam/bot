import express from 'express';
import bodyParser from 'body-parser';
import { config } from 'dotenv';
import TelegramBot from 'node-telegram-bot-api';
import db, { admin } from './firebase.js';
import yookassa from './yookassa.js';

config();

const TOKEN = process.env.TELEGRAM_TOKEN;
const URL = process.env.RENDER_EXTERNAL_URL;
const PORT = process.env.PORT || 3000;
const CHANNEL_USERNAME = process.env.CHANNEL_USERNAME;
const BOT_USERNAME = process.env.BOT_USERNAME;

const FIREBASE_SERVICE_KEY = JSON.parse(process.env.FIREBASE_SERVICE_KEY);
if (!admin.apps.length) {
    admin.initializeApp({
        credential: admin.credential.cert(FIREBASE_SERVICE_KEY),
    });
}

const bot = new TelegramBot(TOKEN);
bot.setWebHook(`${URL}/bot${TOKEN}`);

const app = express();
app.use(bodyParser.json());
app.use(express.static('public'));

app.post(`/bot${TOKEN}`, (req, res) => {
    bot.processUpdate(req.body);
    res.sendStatus(200);
});

app.get('/', (req, res) => {
    res.send(`<h1 style="color:#27ff8c; text-align:center; background:#282828; padding:100px">Bot is running!</h1>`);
});

app.listen(PORT, () => console.log(`Bot running on port ${PORT}`));

const updateUserStep = async (chatId, step) => {
    const ref = db.collection('users').doc(String(chatId));
    const doc = await ref.get();
    if (!doc.exists) {
        await ref.set({
            name: null,
            startedAt: new Date(),
            isSubscribed: null,
            steps: [step],
        });
    } else {
        await ref.update({
            steps: admin.firestore.FieldValue.arrayUnion(step),
        });
    }
};

const setUserName = async (chatId, name) => {
    await db.collection('users').doc(String(chatId)).update({ name });
};

const setSubscriptionStatus = async (chatId, status) => {
    await db.collection('users').doc(String(chatId)).update({ isSubscribed: status });
};

bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    const firstName = msg.from.first_name;

    await updateUserStep(chatId, 'start');
    await setUserName(chatId, firstName);

    const welcomeMessage = `–ü—Ä–∏–≤–µ—Ç, ${firstName}! üëã\n\n–Ø –ö—Å–µ–Ω–∏—è ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∑–¥–æ—Ä–æ–≤—å—é –∏ –±–∞–ª–∞–Ω—Å—É.\n\n–•–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –≤–∏–¥–µ–æ—É—Ä–æ–∫?\n\n–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±–µ –±–ª–∏–∂–µ üëá`;

    const options = {
        reply_markup: {
            inline_keyboard: [
                [
                    { text: 'üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è üü£', callback_data: 'psychology' },
                    { text: 'üßò –ì–∏–º–Ω–∞—Å—Ç–∏–∫–∞ üîµ', callback_data: 'gymnastics' },
                ],
                [{ text: 'ü•ó –ù—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∏—è üü¢', callback_data: 'nutrition' }],
            ],
        },
    };

    bot.sendMessage(chatId, welcomeMessage, options);
});

bot.on('callback_query', async (query) => {
    const chatId = query.message.chat.id;
    const data = query.data;
    const name = query.from.first_name;
    const userId = query.from.id;

    await updateUserStep(chatId, data);
    await setUserName(chatId, name);

    try {
        const channelUsername = `@${CHANNEL_USERNAME.replace('@', '')}`;
        const member = await bot.getChatMember(channelUsername, userId);
        const isSubscribed = ['member', 'creator', 'administrator'].includes(member.status);
        await setSubscriptionStatus(chatId, isSubscribed);

        if (!isSubscribed) {
            return bot.sendMessage(chatId,
                `üîí –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≤–∏–¥–µ–æ—É—Ä–æ–∫—É, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª ${channelUsername}\n\n` +
                `–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–∞ –∫–Ω–æ–ø–∫—É.`,
                {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: 'üì≤ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', url: `https://t.me/${channelUsername.replace('@', '')}` }],
                            [{ text: 'üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data: data }]
                        ]
                    }
                }
            );
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
        return bot.sendMessage(chatId, 'üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.');
    }

    if (data === 'want_course') {
        await updateUserStep(chatId, 'want_course');
        return bot.sendMessage(
            chatId,
            `‚ú® *–ó–∞–ø–∏—à–∏—Å—å –Ω–∞ –∫—É—Ä—Å!*\n\nüîπ –£–Ω–∏–∫–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞\nüîπ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç –ö—Å–µ–Ω–∏–∏\nüîπ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ\n\nüí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å: *39900‚ÇΩ*`,
            {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [[{ text: 'üí∏ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ', callback_data: 'buy_course' }]],
                },
            }
        );
    }

    if (data === 'buy_course') {
        try {
            const payment = await yookassa.createPayment({
                amount: {
                    value: '39900.00',
                    currency: 'RUB',
                },
                confirmation: {
                    type: 'redirect',
                    return_url: `https://t.me/${BOT_USERNAME}`,
                },
                capture: true,
                description: '–ö—É—Ä—Å –æ—Ç –ö—Å–µ–Ω–∏–∏',
                metadata: {
                    telegram_chat_id: chatId
                }
            });

            await updateUserStep(chatId, 'payment_created');
            bot.sendMessage(chatId, `üí≥ –ü–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã: ${payment.confirmation.confirmation_url}`);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞:', error);
            bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç—ë–∂. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    }

    const lessonLinks = {
        psychology: 'https://www.youtube.com/watch?v=iLlrIi9-NfQ',
        gymnastics: 'https://www.youtube.com/watch?v=-wqLcfcA_ig',
        nutrition: 'https://www.youtube.com/watch?v=-e-4Kx5px_I',
    };

    const messages = {
        psychology: 'üß† *–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è*\n\n–í–æ—Ç –≤–∏–¥–µ–æ—É—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Å–µ–±–µ –∏ –æ–±—Ä–µ—Å—Ç–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±–∞–ª–∞–Ω—Å.',
        gymnastics: 'üßò *–°–ª–∞–≤—è–Ω—Å–∫–∞—è –≥–∏–º–Ω–∞—Å—Ç–∏–∫–∞*\n\n–ü–æ–ø—Ä–æ–±—É–π –¥—Ä–µ–≤–Ω–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è –∏ –∂–µ–Ω—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏.',
        nutrition: 'ü•ó *–ù—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∏—è*\n\n–ù–∞—É—á–∏—Å—å –ø–∏—Ç–∞—Ç—å—Å—è –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ –∏ —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è –ª—É—á—à–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.',
    };

    if (messages[data]) {
        const msg = `${messages[data]}\n\nüëâ [–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ](${lessonLinks[data]})`;
        bot.sendMessage(chatId, msg, {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [[{ text: 'üìö –•–æ—á—É –∫—É—Ä—Å!', callback_data: 'want_course' }]],
            },
        });
    }
});
