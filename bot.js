require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const bodyParser = require('body-parser');

const app = express();

const TOKEN = process.env.TELEGRAM_TOKEN;
const URL = process.env.RENDER_EXTERNAL_URL || 'https://bot.onrender.com';
const PORT = process.env.PORT || 3000;
const ADMIN_CHAT_ID = Number(process.env.ADMIN_CHAT_ID); // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ

if (!TOKEN || !ADMIN_CHAT_ID) {
    throw new Error('‚ùå TELEGRAM_TOKEN –∏–ª–∏ ADMIN_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ .env');
}

const bot = new TelegramBot(TOKEN);
bot.setWebHook(`${URL}/bot${TOKEN}`); // IDE –º–æ–∂–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—Ç—å, –Ω–æ —ç—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ

app.use(bodyParser.json());

app.post(`/bot${TOKEN}`, (req, res) => {
    bot.processUpdate(req.body);
    res.sendStatus(200);
});

app.use(express.static('public'));

app.get('/', (_req, res) => {
    res.send(`<h1 style="color:white; text-align:center; background:#282828; padding:100px">Bot is running!</h1>`);
});

app.listen(PORT, () => {
    console.log(`üöÄ Bot is live on port ${PORT}`);
});

const userStats = {};

function updateStats(chatId, key) {
    if (!userStats[chatId]) {
        userStats[chatId] = {
            steps: [],
            startedAt: new Date(),
            isSubscribed: null,
            name: null
        };
    }
    userStats[chatId].steps.push(key);
}

function updateSubscription(chatId, isSubscribed) {
    if (userStats[chatId]) {
        userStats[chatId].isSubscribed = isSubscribed;
    }
}

function setName(chatId, name) {
    if (userStats[chatId]) {
        userStats[chatId].name = name;
    }
}

function logAction(chatId, action) {
    const msg = `üìù ${chatId}: ${action}`;
    bot.sendMessage(ADMIN_CHAT_ID, msg).catch(() => {});
}

async function isUserSubscribed(chatId, userId) {
    try {
        const res = await bot.getChatMember('@ksenia_kmensky', userId);
        return res.status !== 'left' && res.status !== 'kicked';
    } catch (e) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (${chatId}):`, e.message);
        return false;
    }
}

bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    const firstName = msg.from.first_name;

    updateStats(chatId, 'start');
    setName(chatId, firstName);
    logAction(chatId, `–°—Ç–∞—Ä—Ç–æ–≤–∞–ª –±–æ—Ç. –ò–º—è: ${firstName}`);

    const welcomeMessage = `–ü—Ä–∏–≤–µ—Ç, ${firstName}! üëã\n\n–Ø –ö—Å–µ–Ω–∏—è ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∑–¥–æ—Ä–æ–≤—å—é –∏ –±–∞–ª–∞–Ω—Å—É.\n\n–•–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –≤–∏–¥–µ–æ—É—Ä–æ–∫?\n\n–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±–µ –±–ª–∏–∂–µ üëá`;

    const options = {
        reply_markup: {
            inline_keyboard: [
                [
                    { text: 'üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è üü£', callback_data: 'psychology' },
                    { text: 'üßò –ì–∏–º–Ω–∞—Å—Ç–∏–∫–∞ üîµ', callback_data: 'gymnastics' }
                ],
                [
                    { text: 'ü•ó –ù—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∏—è üü¢', callback_data: 'nutrition' }
                ]
            ]
        }
    };

    bot.sendMessage(chatId, welcomeMessage, options);
});

// === /stats —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞ ===
bot.onText(/\/stats/, (msg) => {
    const chatId = msg.chat.id;
    if (chatId !== ADMIN_CHAT_ID) return;

    if (Object.keys(userStats).length === 0) {
        return bot.sendMessage(chatId, 'üì≠ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞');
    }

    let report = 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n';

    for (const [id, user] of Object.entries(userStats)) {
        report += `üë§ ${user.name || '–ë–µ–∑ –∏–º–µ–Ω–∏'} (${id})\n`;
        report += `‚è∞ –° –Ω–∞—á–∞–ª–∞: ${user.startedAt.toLocaleString()}\n`;
        report += `üßæ –î–µ–π—Å—Ç–≤–∏—è: ${user.steps.join(', ')}\n`;
        report += `üîî –ü–æ–¥–ø–∏—Å–∫–∞: ${user.isSubscribed === null ? '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ' : user.isSubscribed ? '‚úÖ' : '‚ùå'}\n\n`;
    }

    bot.sendMessage(chatId, report);
});

// === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ===
bot.on('callback_query', async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const data = callbackQuery.data;
    const userId = callbackQuery.from.id;
    const userName = callbackQuery.from.first_name;

    updateStats(chatId, data);
    setName(chatId, userName);
    logAction(chatId, `–ù–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É: ${data}`);

    if (data === 'want_course') {
        const saleMessage = `‚ú® *–ó–∞–ø–∏—à–∏—Å—å –Ω–∞ –∫—É—Ä—Å!*\n\n–¢—ã —Å–¥–µ–ª–∞–ª–∞ –ø–µ—Ä–≤—ã–π —à–∞–≥. –ì–æ—Ç–æ–≤–∞ —É–≥–ª—É–±–∏—Ç—å—Å—è –≤ –∑–Ω–∞–Ω–∏—è?\n\nüîπ –£–Ω–∏–∫–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞\nüîπ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç –ö—Å–µ–Ω–∏–∏\nüîπ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ`;
        return bot.sendMessage(chatId, saleMessage, { parse_mode: 'Markdown' });
    }

    let messageText = '';
    let lessonLink = '';

    switch (data) {
        case 'psychology':
            messageText = `üß† *–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è*\n\n–í–æ—Ç –≤–∏–¥–µ–æ—É—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Å–µ–±–µ –∏ –æ–±—Ä–µ—Å—Ç–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±–∞–ª–∞–Ω—Å.`;
            lessonLink = 'https://www.youtube.com/watch?v=iLlrIi9-NfQ';
            break;
        case 'gymnastics':
            messageText = `üßò *–°–ª–∞–≤—è–Ω—Å–∫–∞—è –≥–∏–º–Ω–∞—Å—Ç–∏–∫–∞*\n\n–ü–æ–ø—Ä–æ–±—É–π –¥—Ä–µ–≤–Ω–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è –∏ –∂–µ–Ω—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏.`;
            lessonLink = 'https://www.youtube.com/watch?v=-wqLcfcA_ig';
            break;
        case 'nutrition':
            messageText = `ü•ó *–ù—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∏—è*\n\n–ù–∞—É—á–∏—Å—å –ø–∏—Ç–∞—Ç—å—Å—è –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ –∏ —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è –ª—É—á—à–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.`;
            lessonLink = 'https://www.youtube.com/watch?v=-e-4Kx5px_I';
            break;
    }

    const subscribed = await isUserSubscribed(chatId, userId);
    updateSubscription(chatId, subscribed);
    logAction(chatId, `–ü–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª: ${subscribed}`);

    if (!subscribed) {
        return bot.sendMessage(chatId, `üö´ –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∞—Ç–µ—Ä–∏–∞–ª—É, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª.`, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîî –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª', url: 'https://t.me/ksenia_kmensky' }],
                    [{ text: '‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è', callback_data: data }]
                ]
            }
        });
    }

    const lessonMessage = `${messageText}\n\nüëâ [–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ](${lessonLink})`;

    const options = {
        parse_mode: 'Markdown',
        reply_markup: {
            inline_keyboard: [
                [{ text: 'üìö –•–æ—á—É –∫—É—Ä—Å!', callback_data: 'want_course' }]
            ]
        }
    };

    bot.sendMessage(chatId, lessonMessage, options);
});
