import db from './firebase.js';

require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const bodyParser = require('body-parser');


const app = express();
const TOKEN = process.env.TELEGRAM_TOKEN;
const URL = process.env.RENDER_EXTERNAL_URL;
const PORT = process.env.PORT || 3000;
const ADMIN_CHAT_ID = process.env.ADMIN_CHAT_ID;

const bot = new TelegramBot(TOKEN);
bot.setWebHook(`${URL}/bot${TOKEN}`);

app.use(bodyParser.json());

app.post(`/bot${TOKEN}`, (req, res) => {
    bot.processUpdate(req.body);
    res.sendStatus(200);
});

app.use(express.static('public'));
app.get('/', (req, res) => {
    res.send(`<h1 style="color:white; text-align:center; background:#282828; padding:100px">Bot is running!</h1>`);
});

app.listen(PORT, () => console.log(`Bot running on port ${PORT}`));

// === Firestore Utils ===
const updateUserStep = async (chatId, step) => {
    const ref = db.collection('users').doc(String(chatId));
    const doc = await ref.get();
    if (!doc.exists) {
        await ref.set({
            name: null,
            startedAt: new Date(),
            isSubscribed: null,
            steps: [step]
        });
    } else {
        await ref.update({
            steps: admin.firestore.FieldValue.arrayUnion(step)
        });
    }
};

const setUserName = async (chatId, name) => {
    await db.collection('users').doc(String(chatId)).update({ name });
};

const setSubscriptionStatus = async (chatId, status) => {
    await db.collection('users').doc(String(chatId)).update({ isSubscribed: status });
};

const getAllUserStats = async () => {
    const snapshot = await db.collection('users').get();
    return snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
};

const logAction = (chatId, action) => {
    const msg = `üìù ${chatId}: ${action}`;
    bot.sendMessage(ADMIN_CHAT_ID, msg).catch(() => {});
};

// === Dialog ===
bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    const firstName = msg.from.first_name;

    await updateUserStep(chatId, 'start');
    await setUserName(chatId, firstName);
    logAction(chatId, `Start: ${firstName}`);

    const welcomeMessage = `–ü—Ä–∏–≤–µ—Ç, ${firstName}! üëã\n\n–Ø –ö—Å–µ–Ω–∏—è ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∑–¥–æ—Ä–æ–≤—å—é –∏ –±–∞–ª–∞–Ω—Å—É.\n\n–•–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –≤–∏–¥–µ–æ—É—Ä–æ–∫?\n\n–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±–µ –±–ª–∏–∂–µ üëá`;

    const options = {
        reply_markup: {
            inline_keyboard: [[
                { text: 'üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è üü£', callback_data: 'psychology' },
                { text: 'üßò –ì–∏–º–Ω–∞—Å—Ç–∏–∫–∞ üîµ', callback_data: 'gymnastics' }
            ], [
                { text: 'ü•ó –ù—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∏—è üü¢', callback_data: 'nutrition' }
            ]]
        }
    };

    bot.sendMessage(chatId, welcomeMessage, options);
});

bot.onText(/\/stats/, async (msg) => {
    const chatId = msg.chat.id;
    if (chatId.toString() !== ADMIN_CHAT_ID) return;

    const users = await getAllUserStats();
    if (!users.length) return bot.sendMessage(chatId, 'üì≠ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞');

    let report = 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n';
    users.forEach(user => {
        report += `üë§ ${user.name || '–ë–µ–∑ –∏–º–µ–Ω–∏'} (${user.id})\n`;
        report += `‚è∞ –° –Ω–∞—á–∞–ª–∞: ${new Date(user.startedAt._seconds * 1000).toLocaleString()}\n`;
        report += `üßæ –î–µ–π—Å—Ç–≤–∏—è: ${user.steps?.join(', ') || '–Ω–µ—Ç'}\n`;
        report += `üîî –ü–æ–¥–ø–∏—Å–∫–∞: ${user.isSubscribed === true ? '‚úÖ' : '‚ùå'}\n\n`;
    });

    bot.sendMessage(chatId, report);
});

bot.on('callback_query', async (query) => {
    const chatId = query.message.chat.id;
    const data = query.data;
    const name = query.from.first_name;

    await updateUserStep(chatId, data);
    await setUserName(chatId, name);
    logAction(chatId, `–ù–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É: ${data}`);

    if (data === 'want_course') {
        return bot.sendMessage(chatId, `‚ú® *–ó–∞–ø–∏—à–∏—Å—å –Ω–∞ –∫—É—Ä—Å!*\n\nüîπ –£–Ω–∏–∫–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞\nüîπ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç –ö—Å–µ–Ω–∏–∏\nüîπ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ`, {
            parse_mode: 'Markdown'
        });
    }

    const lessonLinks = {
        psychology: 'https://www.youtube.com/watch?v=iLlrIi9-NfQ',
        gymnastics: 'https://www.youtube.com/watch?v=-wqLcfcA_ig',
        nutrition: 'https://www.youtube.com/watch?v=-e-4Kx5px_I'
    };

    const messages = {
        psychology: 'üß† *–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è*\n\n–í–æ—Ç –≤–∏–¥–µ–æ—É—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Å–µ–±–µ –∏ –æ–±—Ä–µ—Å—Ç–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±–∞–ª–∞–Ω—Å.',
        gymnastics: 'üßò *–°–ª–∞–≤—è–Ω—Å–∫–∞—è –≥–∏–º–Ω–∞—Å—Ç–∏–∫–∞*\n\n–ü–æ–ø—Ä–æ–±—É–π –¥—Ä–µ–≤–Ω–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è –∏ –∂–µ–Ω—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏.',
        nutrition: 'ü•ó *–ù—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∏—è*\n\n–ù–∞—É—á–∏—Å—å –ø–∏—Ç–∞—Ç—å—Å—è –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ –∏ —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è –ª—É—á—à–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.'
    };

    const msg = `${messages[data]}\n\nüëâ [–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ](${lessonLinks[data]})`;

    await setSubscriptionStatus(chatId, true); // –£–ø—Ä–æ—â–µ–Ω–Ω–æ: –≤—Å–µ–≥–¥–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    bot.sendMessage(chatId, msg, {
        parse_mode: 'Markdown',
        reply_markup: {
            inline_keyboard: [[{ text: 'üìö –•–æ—á—É –∫—É—Ä—Å!', callback_data: 'want_course' }]]
        }
    });
});
