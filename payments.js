import dotenv from 'dotenv';
dotenv.config();

export default function setupPayments(bot, updateUserStep) {
    bot.on('callback_query', async (query) => {
        const chatId = query.message.chat.id;
        const data = query.data;

        if (data === 'buy_course') {
            const invoice = {
                chat_id: chatId,
                title: '–ö—É—Ä—Å –æ—Ç –ö—Å–µ–Ω–∏–∏',
                description: '–î–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É, –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –∏ —á–∞—Ç—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.',
                payload: 'course_payload_test',
                provider_token: process.env.PROVIDER_TOKEN,
                start_parameter: 'pay_course',
                currency: 'RUB',
                prices: [
                    { label: '–ö—É—Ä—Å', amount: 3990000 }, // 39900.00 —Ä—É–±
                ],
            };

            try {
                await bot.sendInvoice(
                    invoice.chat_id,
                    invoice.title,
                    invoice.description,
                    invoice.payload,
                    invoice.provider_token,
                    invoice.start_parameter,
                    invoice.currency,
                    invoice.prices
                );
                await updateUserStep(chatId, 'invoice_sent');
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—á—ë—Ç–∞:', error);
                await bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç—ë–∂. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            }
        }
    });

    bot.on('pre_checkout_query', (query) => {
        bot.answerPreCheckoutQuery(query.id, true);
    });

    bot.on('successful_payment', async (msg) => {
        const chatId = msg.chat.id;
        await updateUserStep(chatId, 'payment_success');
        await bot.sendMessage(chatId, '‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç.');
        await bot.sendMessage(chatId, 'üì¶ –°—Å—ã–ª–∫–∞ –Ω–∞ –∫—É—Ä—Å: https://t.me/ksenia_kmensky');
    });
}
